// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"gopkg.in/yaml.v2"

	"github.com/oapi-codegen/runtime"
)

// Defines values for WorkloadType.
const (
	Deployment  WorkloadType = "Deployment"
	StatefulSet WorkloadType = "StatefulSet"
)

// Environment defines model for Environment.
type Environment struct {
	// Cluster The name of the Kubernetes cluster
	Cluster *string `json:"cluster,omitempty"`

	// Name The name of the environment
	Name string `json:"name"`

	// Stage The stage of the environment
	Stage string `json:"stage"`

	// Zone The zone of the environment
	Zone *string `json:"zone,omitempty"`
}

// Issue defines model for Issue.
type Issue struct {
	// Key The issue identifier
	Key string `json:"key"`

	// Link The link to the ticketing system of the issue
	Link *string `json:"link,omitempty"`

	// Status The status of this issue
	Status *string `json:"status,omitempty"`

	// Summary The summary of this issue
	Summary string `json:"summary"`

	// Type The issue type
	Type *string `json:"type,omitempty"`
}

// Issues defines model for Issues.
type Issues = []Issue

// Link defines model for Link.
type Link struct {
	// Name The link name
	Name *string `json:"name,omitempty"`

	// Type The type of the link
	Type *string `json:"type,omitempty"`

	// Url The URL of the link
	Url *string `json:"url,omitempty"`
}

// Links defines model for Links.
type Links = []Link

// Node defines model for Node.
type Node struct {
	// Ip The node name
	Ip *string `json:"ip,omitempty"`

	// Name The node name
	Name *string `json:"name,omitempty"`
}

// Pod defines model for Pod.
type Pod struct {
	// Annotations The annotations of this pod
	Annotations *map[string]string `json:"annotations,omitempty"`

	// BoundedContext The DDD bounded context this pod is associated to
	BoundedContext *string `json:"boundedContext,omitempty"`

	// ComponentName The component name this pod is built up
	ComponentName *string `json:"componentName,omitempty"`

	// ComponentType The component type this pod is built up
	ComponentType *string `json:"componentType,omitempty"`

	// ContainerCount The number of containers specified
	ContainerCount *float32 `json:"containerCount,omitempty"`

	// ContainerReady The number of containers available for service
	ContainerReady *float32 `json:"containerReady,omitempty"`

	// CreationTime The date and time this pod has been created at
	CreationTime *time.Time `json:"creationTime,omitempty"`

	// DeliveryName The name of the delivery this pod is part of
	DeliveryName *string `json:"deliveryName,omitempty"`

	// DeliveryVersion The version of the delivery this pod is part of
	DeliveryVersion *string `json:"deliveryVersion,omitempty"`

	// Domain The DDD domain this pod is associated to
	Domain *string `json:"domain,omitempty"`

	// Id The pod ID
	Id string `json:"id"`

	// Ip The IP of the pod
	Ip *string `json:"ip,omitempty"`

	// Labels The labels of this pod
	Labels *map[string]string `json:"labels,omitempty"`
	Links  *Links             `json:"links,omitempty"`

	// Name The pod name
	Name string `json:"name"`

	// Namespace The namespace this pod is running in
	Namespace string `json:"namespace"`
	Node      *Node  `json:"node,omitempty"`

	// Phase The phase of this pod
	Phase *string `json:"phase,omitempty"`

	// StartTime The date and time this pod has been started at
	StartTime *time.Time `json:"startTime,omitempty"`

	// Subdomain The DDD subdomain this pod is associated to
	Subdomain *string `json:"subdomain,omitempty"`

	// Version The version of this pod
	Version *string `json:"version,omitempty"`
}

// Pods defines model for Pods.
type Pods = []Pod

// Release defines model for Release.
type Release struct {
	// BoundedContext The bounded context of this release
	BoundedContext *string `json:"boundedContext,omitempty"`

	// Domain The domain of this release
	Domain *string `json:"domain,omitempty"`

	// Id The release identifier
	Id string `json:"id"`

	// InitialDeploymentTime The date and time when this release was initialy deployed
	InitialDeploymentTime *time.Time `json:"initialDeploymentTime,omitempty"`

	// LatestDeploymentTime The date and time when this release was last updated
	LatestDeploymentTime *time.Time `json:"latestDeploymentTime,omitempty"`

	// Name The release name
	Name string `json:"name"`

	// Namespace The namespace where this release is deployed
	Namespace *string `json:"namespace,omitempty"`

	// Status The status of this release
	Status *string `json:"status,omitempty"`

	// Subdomain The subdomain of this release
	Subdomain *string `json:"subdomain,omitempty"`

	// Version The version of this release
	Version   *string    `json:"version,omitempty"`
	Workloads *Workloads `json:"workloads,omitempty"`
}

// Releases defines model for Releases.
type Releases = []Release

// Version defines model for Version.
type Version struct {
	// Application The name of the application
	Application string `json:"application"`

	// GoVersion The Go version of the application
	GoVersion *string `json:"goVersion,omitempty"`

	// Platform The platform this application is built for
	Platform *string `json:"platform,omitempty"`

	// Revision The CVS revision hash this application is built from
	Revision *string `json:"revision,omitempty"`

	// Time The commit date and time of the revision within the CVS
	Time *time.Time `json:"time,omitempty"`

	// Version The version of the application
	Version string `json:"version"`
}

// Workload defines model for Workload.
type Workload struct {
	// Annotations The annotations of this workload
	Annotations *map[string]string `json:"annotations,omitempty"`

	// BoundedContext The DDD bounded context this workload is associated to
	BoundedContext *string `json:"boundedContext,omitempty"`

	// CreationTime The creation date and time of the workload
	CreationTime *time.Time `json:"creationTime,omitempty"`

	// Domain The DDD domain this workload is associated to
	Domain *string `json:"domain,omitempty"`

	// Id The workload ID
	Id string `json:"id"`

	// Ingresses The list of ingresses associated with this workload
	Ingresses *[]string `json:"ingresses,omitempty"`

	// Labels The labels of this workload
	Labels *map[string]string `json:"labels,omitempty"`

	// Name The workload name
	Name string `json:"name"`

	// Namespace The namespace this workload is running in
	Namespace *string `json:"namespace,omitempty"`

	// ReleaseName The name of the release this workload is part of
	ReleaseName *string `json:"releaseName,omitempty"`

	// ReleaseVersion The version of the release this workload is part of
	ReleaseVersion *string `json:"releaseVersion,omitempty"`

	// ReplicasDesired The number of replicas desired to be available to users
	ReplicasDesired float32 `json:"replicasDesired"`

	// ReplicasReady The number of replicas available to users
	ReplicasReady float32 `json:"replicasReady"`

	// Status The status of this workload
	Status *string `json:"status,omitempty"`

	// Subdomain The DDD subdomain this workload is associated to
	Subdomain *string `json:"subdomain,omitempty"`

	// Technology The technology used for this workload, taken from the label `app.kubernetes.io/component`
	Technology *string `json:"technology,omitempty"`

	// Type The workload type
	Type WorkloadType `json:"type"`

	// Version The version of this workload
	Version *string `json:"version,omitempty"`
}

// WorkloadType The workload type
type WorkloadType string

// Workloads defines model for Workloads.
type Workloads = []Workload

// GetConfigParams defines parameters for GetConfig.
type GetConfigParams struct {
	// Accept The desired content type of the response
	Accept string `json:"Accept"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetConfig request
	GetConfig(ctx context.Context, params *GetConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironment request
	GetEnvironment(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPods request
	GetPods(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReleases request
	GetReleases(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReleasesByName request
	GetReleasesByName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReleasesNameIssues request
	GetReleasesNameIssues(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVersion request
	GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkloads request
	GetWorkloads(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetConfig(ctx context.Context, params *GetConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironment(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPods(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPodsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReleases(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReleasesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReleasesByName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReleasesByNameRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReleasesNameIssues(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReleasesNameIssuesRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkloads(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkloadsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetConfigRequest generates requests for GetConfig
func NewGetConfigRequest(server string, params *GetConfigParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, params.Accept)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Accept", headerParam0)

	}

	return req, nil
}

// NewGetEnvironmentRequest generates requests for GetEnvironment
func NewGetEnvironmentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/environment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPodsRequest generates requests for GetPods
func NewGetPodsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pods")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReleasesRequest generates requests for GetReleases
func NewGetReleasesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/releases")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReleasesByNameRequest generates requests for GetReleasesByName
func NewGetReleasesByNameRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/releases/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReleasesNameIssuesRequest generates requests for GetReleasesNameIssues
func NewGetReleasesNameIssuesRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/releases/%s/issues", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVersionRequest generates requests for GetVersion
func NewGetVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkloadsRequest generates requests for GetWorkloads
func NewGetWorkloadsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workloads")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetConfigWithResponse request
	GetConfigWithResponse(ctx context.Context, params *GetConfigParams, reqEditors ...RequestEditorFn) (*GetConfigResponse, error)

	// GetEnvironmentWithResponse request
	GetEnvironmentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error)

	// GetPodsWithResponse request
	GetPodsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPodsResponse, error)

	// GetReleasesWithResponse request
	GetReleasesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetReleasesResponse, error)

	// GetReleasesByNameWithResponse request
	GetReleasesByNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetReleasesByNameResponse, error)

	// GetReleasesNameIssuesWithResponse request
	GetReleasesNameIssuesWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetReleasesNameIssuesResponse, error)

	// GetVersionWithResponse request
	GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error)

	// GetWorkloadsWithResponse request
	GetWorkloadsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWorkloadsResponse, error)
}

type GetConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	YAML200      *string
}

// Status returns HTTPResponse.Status
func (r GetConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Environment
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPodsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pods
}

// Status returns HTTPResponse.Status
func (r GetPodsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPodsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReleasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Releases
}

// Status returns HTTPResponse.Status
func (r GetReleasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReleasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReleasesByNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Releases
}

// Status returns HTTPResponse.Status
func (r GetReleasesByNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReleasesByNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReleasesNameIssuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Issues
}

// Status returns HTTPResponse.Status
func (r GetReleasesNameIssuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReleasesNameIssuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Version
}

// Status returns HTTPResponse.Status
func (r GetVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workloads
}

// Status returns HTTPResponse.Status
func (r GetWorkloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetConfigWithResponse request returning *GetConfigResponse
func (c *ClientWithResponses) GetConfigWithResponse(ctx context.Context, params *GetConfigParams, reqEditors ...RequestEditorFn) (*GetConfigResponse, error) {
	rsp, err := c.GetConfig(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigResponse(rsp)
}

// GetEnvironmentWithResponse request returning *GetEnvironmentResponse
func (c *ClientWithResponses) GetEnvironmentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error) {
	rsp, err := c.GetEnvironment(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentResponse(rsp)
}

// GetPodsWithResponse request returning *GetPodsResponse
func (c *ClientWithResponses) GetPodsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPodsResponse, error) {
	rsp, err := c.GetPods(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPodsResponse(rsp)
}

// GetReleasesWithResponse request returning *GetReleasesResponse
func (c *ClientWithResponses) GetReleasesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetReleasesResponse, error) {
	rsp, err := c.GetReleases(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReleasesResponse(rsp)
}

// GetReleasesByNameWithResponse request returning *GetReleasesByNameResponse
func (c *ClientWithResponses) GetReleasesByNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetReleasesByNameResponse, error) {
	rsp, err := c.GetReleasesByName(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReleasesByNameResponse(rsp)
}

// GetReleasesNameIssuesWithResponse request returning *GetReleasesNameIssuesResponse
func (c *ClientWithResponses) GetReleasesNameIssuesWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetReleasesNameIssuesResponse, error) {
	rsp, err := c.GetReleasesNameIssues(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReleasesNameIssuesResponse(rsp)
}

// GetVersionWithResponse request returning *GetVersionResponse
func (c *ClientWithResponses) GetVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetVersionResponse, error) {
	rsp, err := c.GetVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVersionResponse(rsp)
}

// GetWorkloadsWithResponse request returning *GetWorkloadsResponse
func (c *ClientWithResponses) GetWorkloadsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWorkloadsResponse, error) {
	rsp, err := c.GetWorkloads(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkloadsResponse(rsp)
}

// ParseGetConfigResponse parses an HTTP response from a GetConfigWithResponse call
func ParseGetConfigResponse(rsp *http.Response) (*GetConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest string
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentResponse parses an HTTP response from a GetEnvironmentWithResponse call
func ParseGetEnvironmentResponse(rsp *http.Response) (*GetEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPodsResponse parses an HTTP response from a GetPodsWithResponse call
func ParseGetPodsResponse(rsp *http.Response) (*GetPodsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPodsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pods
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetReleasesResponse parses an HTTP response from a GetReleasesWithResponse call
func ParseGetReleasesResponse(rsp *http.Response) (*GetReleasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReleasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Releases
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetReleasesByNameResponse parses an HTTP response from a GetReleasesByNameWithResponse call
func ParseGetReleasesByNameResponse(rsp *http.Response) (*GetReleasesByNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReleasesByNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Releases
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetReleasesNameIssuesResponse parses an HTTP response from a GetReleasesNameIssuesWithResponse call
func ParseGetReleasesNameIssuesResponse(rsp *http.Response) (*GetReleasesNameIssuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReleasesNameIssuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Issues
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetVersionResponse parses an HTTP response from a GetVersionWithResponse call
func ParseGetVersionResponse(rsp *http.Response) (*GetVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Version
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWorkloadsResponse parses an HTTP response from a GetWorkloadsWithResponse call
func ParseGetWorkloadsResponse(rsp *http.Response) (*GetWorkloadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workloads
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
